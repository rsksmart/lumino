#!/bin/bash

SHOW_LOGS=0
CLEAN_IMAGE_CACHE=0
ROOT_PATH=$(pwd)

RSK_MODULE_NAME="rsk-node"
EXPLORER_MODULE_NAME="lumino-explorer"
NOTIFIER_MODULE_NAME="rif-notifier"
VALID_MODULES="${RSK_MODULE_NAME} ${EXPLORER_MODULE_NAME} ${NOTIFIER_MODULE_NAME}"
NOTIFIER_REPLICAS=3
RUN_IN_BACKGROUND=0
INSTANCE_NUMBER=1
REGTEST_CHAIN="regtest"
CHAIN_NAME=${REGTEST_CHAIN}
COMPOSE_FILE_NAME="docker-compose.${CHAIN_NAME}.yml"
CHAIN_DATABASE_PATH="${HOME}/.rsk/${CHAIN_NAME}"
ROOT_FOLDER_NAME=${PWD##*/}
NETWORK_NAME="${CHAIN_NAME}_network"
RSK_CORE_VERSION_CODENAME=WASABI
RSK_CORE_VERSION_NUMBER=1.2.0

# Utils
function is_number() {
    if [[ "$1" =~ ^[0-9]+$ ]] ; then
        echo 1
    else
        echo 0
    fi
}

function validateChainDBPath() {
    if [ "${CHAIN_DATABASE_PATH}" == "" ] ||  ! [ -d "${CHAIN_DATABASE_PATH}" ]; then
        echo "You need to specify a valid database path."
        exit 1
    fi
}

function createMissingResources() {
    NETWORK=$(sudo docker network ls --filter name=${NETWORK_NAME} -q)
    if [ "${NETWORK}" == "" ]; then
        echo "Creating network ${NETWORK_NAME}"
        sudo docker network create ${NETWORK_NAME}
    fi
}

function createRskDatabase() {
    DATABASE_VOLUMEN="${ROOT_PATH}/rsk-node/database"
    sudo rm -rf "${DATABASE_VOLUMEN}"
    if [ "${CHAIN_NAME}" == "${REGTEST_CHAIN}" ]; then
        unzip "${ROOT_PATH}/rsk-node/assets/regtest/rsk-db.zip" -d "${ROOT_PATH}/rsk-node/database"
    else
        validateChainDBPath
        sudo ln -s "${CHAIN_DATABASE_PATH}" "${ROOT_PATH}/rsk-node/database"
    fi
    sudo chmod -R 777 "${ROOT_PATH}/rsk-node/database"
}

function validateModuleName() {
    MODULE_NAME=$1
    if [ "${MODULE_NAME}" == "" ]; then
        echo "You have to provide a module name"
        exit 1
    fi
    IS_VALID_MODULE="0"
    for VALID_MODULE in ${VALID_MODULES[*]};
    do
        IS_VALID_MODULE=$([[ "${VALID_MODULE}" == "${MODULE_NAME}" ]] && echo "1" || echo "0")
        if [ "${IS_VALID_MODULE}" == "1" ]; then
            break
        fi
    done
    if [ "${IS_VALID_MODULE}" == "0" ]; then
        echo "Invalid module name ${MODULE_NAME}, valid values are: ${VALID_MODULES[*]}"
        exit 1
    fi
}
function validateModuleNames() {
    MODULE_NAMES=$1
    if [ "" == "${MODULE_NAMES}" ]; then
        echo "You need to specify at least one module name"
        exit 1
    fi
    IFS=',' read -ra MODULE_NAMES <<< "${MODULE_NAMES}"
    for MODULE_NAME in ${MODULE_NAMES[*]}; do
        MODULE_NAME=$(echo "${MODULE_NAME}" | xargs)
        validateModuleName "${MODULE_NAME}"
    done
}


function showUsage() {
    cat "${ROOT_PATH}/usage.md"
}

function exitOnFailure() {
    if [ "$1" != 0 ]; then
        exit 1
    fi
}

# Manager functions

function checkAndGenerateModuleImage() {
    MODULE_NAME=$1
    ARGS=$2
    IMAGE_NAME="${MODULE_NAME}-${CHAIN_NAME}-image"
    IMAGE=$(sudo docker images | grep "${IMAGE_NAME}")
    DOCKER_BUILD_ARGS=""
    if [ "${ARGS}" != "" ]; then
        IFS=',' read -ra ARGS <<< "${ARGS}"
        for ARG in ${ARGS[*]}; do
            ARG=$(echo "${ARG}" | xargs)
            DOCKER_BUILD_ARGS="${DOCKER_BUILD_ARGS} --build-arg ${ARG}"
        done
    fi
    if [ "${IMAGE}" == "" ]; then
        echo "Generating missing image ${IMAGE_NAME} ..."
        cd "${ROOT_PATH}/${MODULE_NAME}" || exit
        sudo docker build ${DOCKER_BUILD_ARGS} --no-cache -t "${IMAGE_NAME}" .
        cd "${ROOT_PATH}" || exit
    elif [ ${CLEAN_IMAGE_CACHE} == 1 ]; then
        echo "Cleaning image cache for ${IMAGE_NAME} ..."
        cd "${ROOT_PATH}/${MODULE_NAME}" || exit
        sudo docker build ${DOCKER_BUILD_ARGS} --no-cache -t "${IMAGE_NAME}" .
        cd "${ROOT_PATH}" || exit
    fi
}

function buildModuleImage() {
    MODULE_NAME=$1
    ARGS=$2
    IMAGE_NAME="${MODULE_NAME}-${CHAIN_NAME}-image"
    DOCKER_BUILD_ARGS=""
    if [ "${ARGS}" != "" ]; then
        IFS=',' read -ra ARGS <<< "${ARGS}"
        for ARG in ${ARGS[*]}; do
            ARG=$(echo "${ARG}" | xargs)
            DOCKER_BUILD_ARGS="${DOCKER_BUILD_ARGS} --build-arg ${ARG}"
        done
    fi
    echo "Generating image ${IMAGE_NAME} ..."
    cd "${ROOT_PATH}/${MODULE_NAME}" || exit
    if [ ${CLEAN_IMAGE_CACHE} == 1 ]; then
        sudo docker build ${DOCKER_BUILD_ARGS} --no-cache -t "${IMAGE_NAME}" .
    else
        sudo docker build ${DOCKER_BUILD_ARGS} -t "${IMAGE_NAME}" .
    fi
    cd "${ROOT_PATH}" || exit
}

function checkAllImages() {
    echo "Checking all required docker images"
    checkAndGenerateModuleImage "${RSK_MODULE_NAME}" "CHAIN_NAME=${CHAIN_NAME},RSK_CORE_VERSION_CODENAME=${RSK_CORE_VERSION_CODENAME},RSK_CORE_VERSION_NUMBER=${RSK_CORE_VERSION_NUMBER}"
    checkAndGenerateModuleImage "${EXPLORER_MODULE_NAME}"
    checkAndGenerateModuleImage "${NOTIFIER_MODULE_NAME}"
}

function showModuleIp() {
    MODULE_NAME=$1
    validateModuleName "${MODULE_NAME}"
    sudo docker inspect --format "{{ .NetworkSettings.Networks.${NETWORK_NAME}.IPAddress }}" "${ROOT_FOLDER_NAME}_${MODULE_NAME}_${INSTANCE_NUMBER}"
}

function showAllModuleIps() {
    RSK_NODE_IP=$(sudo docker inspect --format "{{ .NetworkSettings.Networks.${NETWORK_NAME}.IPAddress }}" "${ROOT_FOLDER_NAME}_rsk-node_1")
    EXPLORER_IP=$(sudo docker inspect --format "{{ .NetworkSettings.Networks.${NETWORK_NAME}.IPAddress }}" "${ROOT_FOLDER_NAME}_lumino-explorer_1")
    echo "RSK NODE ----- ${RSK_NODE_IP}"
    echo "LUMINO EXPLORER ----- ${EXPLORER_IP}"
    for NOTIFIER_NUMBER in $(seq 1 ${NOTIFIER_REPLICAS}); do
        RIF_NOTIFIER_IP=$(sudo docker inspect --format "{{ .NetworkSettings.Networks.${NETWORK_NAME}.IPAddress }}" "${ROOT_FOLDER_NAME}_rif-notifier_${NOTIFIER_NUMBER}")
        echo "RIF_NOTIFIER_${NOTIFIER_NUMBER} ----- ${RIF_NOTIFIER_IP}"
    done
}

function showRSKInformation() {
    sudo docker exec -i -t ${ROOT_FOLDER_NAME}_rsk-node_1 /usr/bin/getInfo
    echo
}

function doStart() {
    echo "Starting all modules"
    createMissingResources
    createRskDatabase
    checkAllImages
    cd "${ROOT_PATH}" || exit
    if [ "${RUN_IN_BACKGROUND}" == 0 ]; then
        sudo docker-compose -f ${COMPOSE_FILE_NAME}  up --scale "${NOTIFIER_MODULE_NAME}=${NOTIFIER_REPLICAS}"
        if [ ${SHOW_LOGS} == 1 ]; then
            sudo docker-compose -f ${COMPOSE_FILE_NAME}  logs
        fi
    else
        sudo docker-compose -f ${COMPOSE_FILE_NAME}  up -d --scale "${NOTIFIER_MODULE_NAME}=${NOTIFIER_REPLICAS}"
        showAllModuleIps
    fi
    exitOnFailure $?
}

function startModule() {
    MODULE_NAME=$(echo "$1" | xargs)
    cd "${ROOT_PATH}" || exit

    if [ "${MODULE_NAME}" == "${RSK_MODULE_NAME}" ]; then
        createRskDatabase
        checkAndGenerateModuleImage "${MODULE_NAME}" "CHAIN_NAME=${CHAIN_NAME}"
    else
        checkAndGenerateModuleImage "${MODULE_NAME}"
    fi

    if [ "${MODULE_NAME}" == "${NOTIFIER_MODULE_NAME}" ]; then
        sudo docker-compose -f ${COMPOSE_FILE_NAME} up -d --scale "${NOTIFIER_MODULE_NAME}=${NOTIFIER_REPLICAS}" "${MODULE_NAME}"
    else
        sudo docker-compose -f ${COMPOSE_FILE_NAME} up -d "${MODULE_NAME}"
    fi
    if [ ${SHOW_LOGS} == 1 ]; then
        sudo docker-compose -f ${COMPOSE_FILE_NAME} logs
    fi
    exitOnFailure $?
}

function doBuildModules() {
    echo "Building Modules $*"
    MODULE_NAMES=$(echo "$*" | xargs)
    IFS=',' read -ra MODULE_NAMES <<< "${MODULE_NAMES}"
    for MODULE_NAME in ${MODULE_NAMES[*]}; do
        if [ "${MODULE_NAME}" == "${RSK_MODULE_NAME}" ]; then
            buildModuleImage "${MODULE_NAME}" "CHAIN_NAME=${CHAIN_NAME},RSK_CORE_VERSION_CODENAME=${RSK_CORE_VERSION_CODENAME},RSK_CORE_VERSION_NUMBER=${RSK_CORE_VERSION_NUMBER}"
        else
            buildModuleImage "${MODULE_NAME}"
        fi
    done
}

function doCleanModules() {
    echo "Cleaning Modules $*"
    MODULE_NAMES=$(echo "$*" | xargs)
    IFS=',' read -ra MODULE_NAMES <<< "${MODULE_NAMES}"
    for MODULE_NAME in ${MODULE_NAMES[*]}; do
        CLEAN_IMAGE_CACHE=1
        if [ "${MODULE_NAME}" == "${RSK_MODULE_NAME}" ]; then
            checkAndGenerateModuleImage "${MODULE_NAME}" "CHAIN_NAME=${CHAIN_NAME},RSK_CORE_VERSION_CODENAME=${RSK_CORE_VERSION_CODENAME},RSK_CORE_VERSION_NUMBER=${RSK_CORE_VERSION_NUMBER}"
        else
            checkAndGenerateModuleImage "${MODULE_NAME}"
        fi
    done
}

function doStartModules() {
    echo "Starting Modules $*"
    createMissingResources
    MODULE_NAMES=$(echo "$*" | xargs)
    IFS=',' read -ra MODULE_NAMES <<< "${MODULE_NAMES}"
    for MODULE_NAME in ${MODULE_NAMES[*]}; do
        startModule "${MODULE_NAME}"
        showModuleIp "${MODULE_NAME}"
    done
}

function doConnect() {
    MODULE_NAME=$1
    if [ "${INSTANCE_NUMBER}" == "" ]; then
        INSTANCE_NUMBER=1
    fi
    echo "Trying to connect to ${MODULE_NAME} on instance ${INSTANCE_NUMBER}"
    sudo docker exec -i -t "${ROOT_FOLDER_NAME}_${MODULE_NAME}_${INSTANCE_NUMBER}" /bin/bash
}

function doStop() {
    echo "Stopping all modules"
    cd "${ROOT_PATH}" || exit
    sudo docker-compose -f ${COMPOSE_FILE_NAME}  down
    exitOnFailure $?
}

function stopModule() {
    MODULE_NAME=$(echo "$1" | xargs)
    cd "${ROOT_PATH}" || exit
    if [ "${MODULE_NAME}" == "${NOTIFIER_MODULE_NAME}" ]; then
        sudo docker-compose -f ${COMPOSE_FILE_NAME} stop "${ROOT_FOLDER_NAME}_mysql-db_1"
    fi
    if [ "${MODULE_NAME}" == "${EXPLORER_MODULE_NAME}" ]; then
        sudo docker-compose -f ${COMPOSE_FILE_NAME} stop "${ROOT_FOLDER_NAME}_mongo-db_1"
    fi
    sudo docker-compose -f ${COMPOSE_FILE_NAME}  stop "${MODULE_NAME}"
    exitOnFailure $?
}

function doStopModules() {
    echo "Stopping Modules $*"
    MODULE_NAMES=$(echo "$*" | xargs)
    IFS=',' read -ra MODULE_NAMES <<< "${MODULE_NAMES}"
    for MODULE_NAME in ${MODULE_NAMES[*]}; do
        stopModule "${MODULE_NAME}"
    done
}

function doCleanAll() {
    echo "Cleaning docker system..."
    # Stopping and removing all containers
    sudo docker stop $(sudo docker ps -a -q)
    sudo docker rm $(sudo docker ps -a -q)

    # Removing images
    sudo docker system prune -a -f
}

function manager() {
    if [ "$2" == "" ]; then
        echo "You need to specify at least one parameter, you can use --help to know how to use this command."
        exit 1
    fi
    PARSED_ARGUMENTS=$(getopt -a -n alphabet -o h --long rsk-db-path:,testnet,mainnet,rsk-information,ip,ip-module:,clean,clean-all,clean-modules:,build-modules:,start,background,start-modules:,connect:,stop,stop-modules:,notifiers:,instance-number:,logs,help -- "$@")
    VALID_ARGUMENTS=$?
    if [ "$VALID_ARGUMENTS" != "0" ]; then
        showUsage
        exit 1
    fi
    eval set -- "$PARSED_ARGUMENTS"
    DB_ALREADY_SET=0
    ACTION=""
    while :; do
        case "$1" in
        --clean)
            CLEAN_IMAGE_CACHE=1
            shift
            ;;
        --clean-all)
            ACTION="doCleanAll"
            shift
            ;;
        --clean-modules)
            MODULE_NAMES=$(echo "$2" | xargs)
            validateModuleNames "${MODULE_NAMES}"
            ACTION="doCleanModules ${MODULE_NAMES[*]}"
            shift
            shift
            ;;
        --start)
            ACTION="doStart"
            shift
            ;;
        --background)
            RUN_IN_BACKGROUND=1
            shift
            ;;
        --start-modules)
            MODULE_NAMES=$(echo "$2" | xargs)
            validateModuleNames "${MODULE_NAMES}"
            ACTION="doStartModules ${MODULE_NAMES[*]}"
            shift
            shift
            ;;
        --connect)
            MODULE_NAME=$(echo "$2" | xargs)
            validateModuleName "${MODULE_NAME}"
            ACTION="doConnect ${MODULE_NAME}"
            shift
            shift
            ;;
        --instance-number)
            INSTANCE_NUMBER=$(echo "$2" | xargs)
            shift
            shift
            ;;
        --stop)
            ACTION="doStop"
            shift
            ;;
        --stop-modules)
            MODULE_NAMES=$(echo "$2" | xargs)
            validateModuleNames "${MODULE_NAMES}"
            ACTION="doStopModules ${MODULE_NAMES[*]}"
            shift
            shift
            ;;
        --notifiers)
            NOTIFIER_REPLICAS=$(echo "$2" | xargs)
            if [[ $(is_number "${NOTIFIER_REPLICAS}") == 0 ]]; then
                echo "Invalid notifiers parameter value: ${NOTIFIER_REPLICAS}, it should be a number."
                exit 1
            fi
            shift
            shift
            ;;
        --logs)
            SHOW_LOGS=1
            shift
            ;;
        --ip)
            ACTION="showAllModuleIps"
            shift
            ;;
        --ip-module)
            MODULE_NAME=$(echo "$2" | xargs)
            validateModuleName "${MODULE_NAME}"
            ACTION="showModuleIp ${MODULE_NAME}"
            shift
            shift
            ;;
        --rsk-information)
            ACTION="showRSKInformation"
            shift
            ;;
        --testnet)
            CHAIN_NAME="testnet"
            COMPOSE_FILE_NAME="docker-compose.${CHAIN_NAME}.yml"
            if [ ${DB_ALREADY_SET} == 0 ]; then
                CHAIN_DATABASE_PATH="${HOME}/.rsk/${CHAIN_NAME}"
            fi
	    NETWORK_NAME="${CHAIN_NAME}_network"
            RSK_CORE_VERSION_CODENAME=PAPYRUS
            RSK_CORE_VERSION_NUMBER=2.1.0
            shift
            ;;
        --mainnet)
            CHAIN_NAME="mainnet"
            COMPOSE_FILE_NAME="docker-compose.${CHAIN_NAME}.yml"
            CHAIN_DATABASE_PATH="${HOME}/.rsk/${CHAIN_NAME}"
            if [ ${DB_ALREADY_SET} == 0 ]; then
                CHAIN_DATABASE_PATH="${HOME}/.rsk/${CHAIN_NAME}"
            fi
            NETWORK_NAME="${CHAIN_NAME}_network"
	    RSK_CORE_VERSION_CODENAME=PAPYRUS
            RSK_CORE_VERSION_NUMBER=2.1.0
            shift
            ;;
        --rsk-db-path)
            CHAIN_DATABASE_PATH=$(echo "$2" | xargs)
            DB_ALREADY_SET=1
            shift
            shift
            ;;
        --build-modules)
            MODULE_NAMES=$(echo "$2" | xargs)
            validateModuleNames "${MODULE_NAMES}"
            ACTION="doBuildModules ${MODULE_NAMES[*]}"
            shift
            shift
            ;;
        -h | --help)
            showUsage
            exit 0
            shift
            ;;
        # -- means the end of the arguments; drop this, and break out of the while loop
        --)
            shift
            break
            ;;
        # If invalid options were passed, then getopt should have reported an error,
        # which we checked as VALID_ARGUMENTS when getopt was called...
        *)
            echo "Unexpected option: $1 - this should not happen."
            showUsage
            exit 1
            ;;
        esac
    done

    if [ "${ACTION}" != "" ]; then
        eval "${ACTION}"
        exitOnFailure
    fi
}

manager "$0" "$@"

exit 0
