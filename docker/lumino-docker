#!/bin/bash

# This script is used to manage the containers
# Usage: ./lumino-docker --start=<MODULE_NAME> | --stop=<MODULE_NAME> | --connect=<MODULE_NAME>

SHOW_LOGS=0
ACTION=""
ROOT_PATH=$(pwd)

function args() {
  PARSED_ARGUMENTS=$(getopt -a -n alphabet -o hl --long start:,connect:,stop:,help,logs -- "$@")
  VALID_ARGUMENTS=$?
  if [ "$VALID_ARGUMENTS" != "0" ]; then
    usage
  fi
  eval set -- "$PARSED_ARGUMENTS"
  while :
  do
    case "$1" in
      --start)
        ACTION="start"
        MODULE_NAME=$2
        if [ "${MODULE_NAME}" == "" ]; then
          echo "You have to provide an image name"
          exit 1
        fi
        shift;
        shift;
      ;;
      --connect)
        ACTION="connect"
        MODULE_NAME=$2
        if [ "${MODULE_NAME}" == "" ]; then
          echo "You have to provide an image name"
          exit 1
        fi
        shift;
        shift;
      ;;
      --stop)
        ACTION="stop"
        MODULE_NAME=$2
        if [ "${MODULE_NAME}" == "" ]; then
          echo "You have to provide an image name"
          exit 1
        fi
        shift;
        shift;
      ;;
      -h | --help)
        usage
        exit 0
        shift;
      ;;
      -l | --logs)
        SHOW_LOGS=1
        echo "Image logs activated, we are going to run docker on attach mode"
        shift;
      ;;
      # -- means the end of the arguments; drop this, and break out of the while loop
      --) shift; break ;;
      # If invalid options were passed, then getopt should have reported an error,
      # which we checked as VALID_ARGUMENTS when getopt was called...
      *) echo "Unexpected option: $1 - this should not happen."
         usage
         exit 1
    esac
  done
}

function usage() {
  echo "Usage:
  ./lumino-docker --start=<MODULE_NAME> (Optional --logs or -l): to start an specific module (with or without logs).
  ./lumino-docker --stop=<MODULE_NAME>: to stop a specific module.
  ./lumino-docker --connect=<MODULE_NAME>: to connect to a specific module.
  ./lumino-docker --help or -h: to show this help."
}

function startImage() {
  echo "Trying to start image ${MODULE_NAME}"
  cd "${ROOT_PATH}/${MODULE_NAME}" || exit

  echo "Checking deploy images..."

  IMAGE=$(sudo docker images | grep ${MODULE_NAME}-image)

  if [ "${IMAGE}" == "" ]; then
      echo "Generating image..."
      sudo docker build --no-cache -t "${MODULE_NAME}-image" .
  fi

  if [ "${SHOW_LOGS}" == 1 ]; then
    sudo docker-compose up
    exitOnFailure $?
  else
    sudo docker-compose up -d
    exitOnFailure $?
    echo "${MODULE_NAME} is running"
  fi
}

function exitOnFailure() {
  if [ "$1" != 0 ]; then
    exit 1
  fi
}

function stopImage() {
  echo "Trying to stop image ${MODULE_NAME}"
  cd "${ROOT_PATH}/${MODULE_NAME}" || exit
  sudo docker-compose down
  exitOnFailure $?
}

function connectImage() {
  sudo docker exec -i -t "${MODULE_NAME}-container" /bin/bash
}

args "$0" "$@"

if [ "${ACTION}" == "start" ]; then
  startImage
elif [ "${ACTION}" == "stop" ]; then
  stopImage
elif [ "${ACTION}" == "connect" ]; then
  connectImage
fi

exit 0